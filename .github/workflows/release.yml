# .github/workflows/release.yml

name: Create Windows Release

# This workflow runs when a new tag starting with 'v' is pushed,
# or can be triggered manually from the Actions tab in GitHub.
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  # The 'build' job now compiles and tests the code on Windows only.
  build:
    name: Build on Windows
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
      # 1. Check out the repository's code, including submodules.
      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # 2. Set up build dependencies for Windows using Chocolatey.
      - name: Install dependencies
        run: choco install -y --no-progress cmake gperf tidy.portable
          
      # 3. Get the version number from the Git tag (e.g., v1.2.3 -> 1.2.3).
      - name: Get the version
        id: get_version
        run: |
          $tag = '${{ github.ref }}'
          $version = $tag -replace '^refs/tags/', ''
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 4. Configure the project using CMake.
      - name: Configure CMake
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DENABLE_TESTS=TRUE

      # 5. Build the executables.
      - name: Build with CMake
        run: cmake --build build --config Release

      # 6. Run the test suite to verify the build.
      - name: Run tests
        run: |
          cd build
          ctest -C Release --verbose

      # 7. Package the Windows executables into a .zip archive.
      - name: Package artifacts
        run: |
          New-Item -ItemType Directory -Path release -Force | Out-Null
          Copy-Item build\Release\hoedown.exe release\
          Copy-Item build\Release\smartypants.exe release\
          $zipName = "hoedown-$env:VERSION-windows-x64.zip"
          if (Test-Path $zipName) { Remove-Item $zipName }
          Compress-Archive -Path release\* -DestinationPath $zipName

      # 8. Upload the created .zip file as a workflow artifact.
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: hoedown-binaries-windows
          path: hoedown-*.zip


  # The 'release' job gathers the Windows artifact and creates the GitHub Release.
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build # Waits for the Windows build to complete.
    permissions:
      contents: write

    steps:
      # 1. Download the .zip archive from the build job.
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 2. Create the GitHub Release and upload the .zip file to it.
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          generate_release_notes: true
          files: artifacts/*/*
